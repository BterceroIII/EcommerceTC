@page "/detail/{Id:int}"
@inject IProductService productService
@inject ICartService cartService

<div class="container px-4 px-lg-5 my-5">


    @if (model != null)
    {
        <div class="row gx-4 gx-lg-5 align-items-center">
            <div class="col-md-6">
                <img class="card-img-top border-dark border-1" src="@model.Imagen" style="width:100%;">
            </div>
            <div class="col-md-6">
                <h1 class="display-5 fw-bolder">@model.Nombre</h1>
                <div class="fs-5 mb-5">

                    @if (model.PrecioOferta != 0 && model.PrecioOferta < model.Precio)
                    {
                        <span class="text-danger text-decoration-line-through">C$ @model.Precio</span>
                        <span>C$ @model.PrecioOferta</span>
                    }
                    else
                    {
                        <span>C$ @model.Precio</span>
                    }
                </div>
                <p class="lead">@model.Descripcion</p>
                <div class="d-flex">
                    <input class="form-control text-center me-3" type="number" min="1" style="width:60px" @bind-value="amount">
                    <button class="btn btn-outline-dark flex-shrink-0 me-3" type="button" @onclick="(async() => await AddCart(model))">
                        <i class="bi-cart-fill me-1"></i>
                        Agregar al carrito
                    </button>
                    <a class="btn btn-outline-dark flex-shrink-0" href="/catalog">
                        <i class="bi-cart-fill me-1"></i>
                        Volver
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }



</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDTO? model = null;
    private int amount = 1;

    protected override async Task OnParametersSetAsync()
    {
        var response = await productService.GetProduct(Id);
        if (response.EsCorrecto)
        {
            model = (ProductDTO) response.Resultado!;
        }
    }

    private async Task AddCart(ProductDTO model)
    {
        decimal? finalPrice = (model.PrecioOferta != 0 && model.PrecioOferta < model.Precio) ? model.PrecioOferta : model.Precio;

        ShoppingCartDTO cart = new ShoppingCartDTO()
            {
                Producto = model,
                Cantidad = amount,
                Total = Convert.ToDecimal(amount) * finalPrice
            };

            await cartService.AddCart(cart);
    }
}
